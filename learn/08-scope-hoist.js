// -----------------------------------------------------
//
// 스코프(Scope)
// - 코드 영역(범위)
// - 전역(전체 영역: global scope)
// - 지역(일부 영역: local scope)
// 
// 호이스트(Hoist)
// - 무엇을 끌어올리나?
// - [ 함수 선언 ]을 [ 코드 작성 영역의 가장 상단 ]으로 끌어올린다.
// - [ var 변수 선언 ]을 [ 코드 작성 영역의 가장 상단 ]으로 끌어올린다.
//
// -----------------------------------------------------

// 호이스트(Function Hoist)
// - 사람들이 현상(벌어진 일)만 보고 그 느낌을 표현한 말에 불과
//
// - 컴퓨터 (JavaScript 엔진 관점) : 
//   코드 스캔 후, 함수 선언을 먼저 메모리에 등록한다. 
//   그리고 코드를 처리한다.
// 
// - 인간 (개발자 관점) : 
//   "작성된 순서대로 코드가 실행될 것이다."

// 선언된 함수는 코드를 작성하는 영역의 
// 가장 상위로 끌어올려진 것처럼 작동된다.
// 함수()

// 함수 선언(Function Declaration)
// 컴퓨터 메모리에 함수가 기억된다.
function 함수() {
  console.log('함수가 실행되었어요!')
}

// 함수 실행
// 컴퓨터 메모리에 기억된 함수 이름을 통해 코드를 실행한다.


/* -------------------------------------------------------------------------- */
/* Var 변수 선언 호이스트 현상                                                      */
/* -------------------------------------------------------------------------- */
// var 변수 선언
console.log(1, 마이네임) // ERROR? or Log?

var 마이네임 = '야무'

console.log(2, 마이네임)

// 변수 선언 호이스트
// 마치 호이스트(끌어올려진 것)처럼 보여요.
// 예측된 결과

// var 변수 선언은 마치 끌어올려진 것처럼 보이는데
// 선언부만 끌어올려진 것처럼 작동한다.
// var 마이네임 // undefined

// console.log(마이네임) // ERROR? or Log?

// 마이네임 = '야무'
